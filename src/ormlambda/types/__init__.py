from __future__ import annotations


from .base import DatabaseType
from .sql_type import SQLType
from .renderers.sql_type_renderer import SQLTypeRenderer
from .factory.sql_type_factory import SQLTypeRendererFactory
from .sql_types import (
    Integer,
    String,
    Char,
    Text,
    Boolean,
    DateTime,
    Timestamp,
    Binary,
)
from .metadata import (
    PrimaryKey,
    AutoGenerated,
    AutoIncrement,
    Unique,
    CheckTypes,
    Default,
    NotNull,
)

# Import dialects to ensure registration
from . import dialects  # noqa: F401

from typing import TYPE_CHECKING, Optional, Type

if TYPE_CHECKING:
    from ormlambda import BaseRepository


# TODOL []: Try to refactor in order to use DatebaseType only
def cast_repository_to_database_type(repository: Type[BaseRepository]) -> Optional[DatabaseType]:
    dicc = {
        "MySQLRepository": "mysql",
        "SQLiteRepository": "sqlite",
    }
    try:
        return DatabaseType(dicc[repository.__class__.__name__])
    except Exception:
        return None


__all__ = [
    "DatabaseType",
    "SQLType",
    "SQLTypeRenderer",
    "SQLTypeRendererFactory",
    "Integer",
    "String",
    "Char",
    "Text",
    "Boolean",
    "DateTime",
    "Timestamp",
    "PrimaryKey",
    "AutoGenerated",
    "AutoIncrement",
    "Unique",
    "CheckTypes",
    "Default",
    "NotNull",
    "Binary",
]
